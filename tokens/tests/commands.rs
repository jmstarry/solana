use futures::{future, prelude::*};
use solana_runtime::{
    bank::Bank, bank_forks::BankForks, banks_server::BanksServer,
    genesis_utils::create_genesis_config,
};
use solana_sdk::{
    banks_client::{Banks, BanksClient},
    native_token::sol_to_lamports,
};
use solana_tokens::{
    commands::test_process_distribute_tokens_with_client, thin_client::ThinClient,
};
use std::sync::Arc;
use tarpc::{
    client,
    server::{self, Channel, Handler},
};
use tokio::runtime::Runtime;
use tokio_serde::formats::Json;

async fn start_client(json_rpc_url: &str) -> std::io::Result<BanksClient> {
    let transport = tarpc::serde_transport::tcp::connect(json_rpc_url, Json::default()).await?;
    BanksClient::new(client::Config::default(), transport).spawn()
}

async fn start_server(json_rpc_url: &str, bank_forks: Arc<BankForks>) -> std::io::Result<()> {
    // Note: These settings are copied straight from the tarpc example.
    tarpc::serde_transport::tcp::listen(&json_rpc_url, Json::default)
        .await?
        // Ignore accept errors.
        .filter_map(|r| future::ready(r.ok()))
        .map(server::BaseChannel::with_defaults)
        // Limit channels to 1 per IP.
        .max_channels_per_key(1, |t| t.as_ref().peer_addr().unwrap().ip())
        // serve is generated by the service attribute. It takes as input any type implementing
        // the generated World trait.
        .map(|channel| {
            let server = BanksServer::new(bank_forks.clone());
            channel.respond_with(server.serve()).execute()
        })
        // Max 10 channels.
        .buffer_unordered(10)
        .for_each(|_| async {})
        .await;
    Ok(())
}

#[test]
fn test_process_distribute_with_rpc_client() {
    let genesis = create_genesis_config(sol_to_lamports(9_000_000.0));
    let bank_forks = Arc::new(BankForks::new(Bank::new(&genesis.genesis_config)));

    let mut runtime = Runtime::new().unwrap();
    let json_rpc_url = "localhost:8899";
    runtime.spawn(start_server(json_rpc_url, bank_forks));
    let banks_client = runtime.block_on(start_client(&json_rpc_url)).unwrap();

    let thin_client = ThinClient::new(runtime, banks_client, false);
    test_process_distribute_tokens_with_client(thin_client, genesis.mint_keypair);
}
